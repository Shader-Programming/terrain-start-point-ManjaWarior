#version 330 core

layout (triangles) in;//name in brackets must be primitve type input, includes points, lines, triangles, lines_adjacency, traingles_adjacency
layout(triangle_strip, max_vertices = 3) out;//outputs the primitve type and the number of vertices, points, line_strip, triangle_strip

vec3 getSurfaceNormal();

in vec3 vNorm[];
in vec2 vUV[];
in mat3 TBN[];
in vec3 posWS[];//arrays for each triangle in the mesh


out vec3 gNorm;
out vec2 gUV;
out mat3 gTBN;
out vec3 gposWS;

void main()
{
	gNorm = getSurfaceNormal();//the surface normal per triangle strip
	for(int i = 0; i < 3; i++)
	{
		gUV = vUV[i];
		gTBN = TBN[i];
		gposWS = posWS[i];

		gl_Position = gl_in[i].gl_Position;

		EmitVertex();
	}
	
	//gl_Position = (gl_in[0].gl_Position + gl_in[1].gl_Position + gl_in[2].gl_Position)/3;//centre of primitive

	EndPrimitive();
}

vec3 getSurfaceNormal()
{
	vec3 a = vec3(gl_in[0].gl_Position) - vec3(gl_in[1].gl_Position);
	vec3 b = vec3(gl_in[2].gl_Position) - vec3(gl_in[1].gl_Position);
	return normalize(cross(a, b));
}