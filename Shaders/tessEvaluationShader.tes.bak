#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;
float noise(vec3 position, int octaves);
float snoise(vec3 x);
float hash(float n);


// unifrom matrices to perform transformations
// previously this would have been done in vertex shader
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform vec3 viewPos;

uniform sampler2D heightMap;

uniform sampler2D perlin_img;

uniform int scale;
uniform int octaves;

uniform float DENS;
uniform float G;

// read in vector arrays from previous shader
in vec3 posTC[] ;
in vec2 texCoordsTC[] ;

// pass along the interpolated values
out vec2 texCoordsES ;
out vec3 posES ;
out vec3 normalsES ;
out float visibilityES;


void main()
{
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates

   texCoordsES = interpolate2D(texCoordsTC[0], texCoordsTC[1], texCoordsTC[2]) ;
   posES = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   
   /*float height = texture(heightMap, texCoordsES).x;
   posES.y = height * scale;
   
   float right = (textureOffset(heightMap, texCoordsES, ivec2(1,0)).r) * scale;
   float left = (textureOffset(heightMap, texCoordsES, ivec2(-1,0)).r) * scale;
   float up = (textureOffset(heightMap, texCoordsES, ivec2(0,1)).r) * scale;
   float down = (textureOffset(heightMap, texCoordsES, ivec2(0,-1)).r) * scale;
   
   float lr = left - right;
   float ud = up - down;
   normalsES = normalize(vec3(lr, 2.0, ud));//central difference method for normals*/
   
   /*vec3 right = vec3(posES.x+1, posES.y, posES.z);
   vec3 left = vec3(posES.x-1, posES.y, posES.z);
   vec3 up = vec3(posES.x, posES.y, posES.z+1);
   vec3 down = vec3(posES.x, posES.y, posES.z-1);

   float r = noise(right,octaves);
   float l = noise(left,octaves);
   float u = noise(up,octaves);
   float d = noise(down,octaves);
   normalsES = normalize(vec3((l-r), 2, (d-u)));*/

   //posES.y = noise(posES, octaves);//working perlin
   float height = texture(perlin_img, texCoordsES).x;
   posES.y = height * scale;
   
   float right = (textureOffset(perlin_img, texCoordsES, ivec2(1,0)).r) * scale;
   float left = (textureOffset(perlin_img, texCoordsES, ivec2(-1,0)).r) * scale;
   float up = (textureOffset(perlin_img, texCoordsES, ivec2(0,1)).r) * scale;
   float down = (textureOffset(perlin_img, texCoordsES, ivec2(0,-1)).r) * scale;
   
   float top_right = right + up;
   float top_left = left + up;
   float bottom_right = right + down;
   float bottom_left = left + down;
   
   
   float trbr = top_right - bottom_right;
   float tlbl = top_left - bottom_left;
   float lr = left - right;
   float ud = up - down;
   vec3 normals_lrud = normalize(vec3(lr, 2.0, ud));
   vec3 normals_diagnals = normalize(vec3(trbr, 2.0, tlbl));
   
   normalsES = normals_lrud+normals_diagnals;

    // transform vertex to clip space
	gl_Position = projection * view * model *vec4(posES, 1.0);
	
	//fog 
	float distanceFromCamera = distance(viewPos, posES);
	visibilityES = exp(-pow((distanceFromCamera*DENS),G));
	visibilityES = clamp(visibilityES, 0.0, 1.0);

} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float hash(float n) {
    return fract(sin(n) * 753.5453123);
}

float snoise(vec3 x)
{
	vec3 p = floor(x);
	vec3 f = fract(x);
	f = f * f * (3.0f - (2.0f * f));

	float n = p.x + p.y * 157.0f + 113.0f * p.z;
	return mix(mix(mix(hash(n + 0.0f), hash(n + 1.0f), f.x),
		mix(hash(n + 157.0f), hash(n + 158.0f), f.x), f.y),
		mix(mix(hash(n + 113.0f), hash(n + 114.0f), f.x),
			mix(hash(n + 270.0f), hash(n + 271.0f), f.x), f.y), f.z);
}

float noise(vec3 position, int octaves)
{
	float total = 0.0f;
	float frequency = 0.005f;
	float maxAmplitude = 0.0f;
	float amplitude = 50.0f;
	for(int i = 0; i < octaves; i++)
	{
		total += snoise(position * frequency) * amplitude;
		frequency *= 2.0f;
		amplitude /= 2.0f;
		maxAmplitude += amplitude;
	}
	return (total / maxAmplitude) * scale;
}