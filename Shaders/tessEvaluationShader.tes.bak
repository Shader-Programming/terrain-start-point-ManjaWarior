#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;

struct OutputPatch
{
    vec3 WorldPos_B030;
    vec3 WorldPos_B021;
    vec3 WorldPos_B012;
    vec3 WorldPos_B003;
    vec3 WorldPos_B102;
    vec3 WorldPos_B201;
    vec3 WorldPos_B300;
    vec3 WorldPos_B210;
    vec3 WorldPos_B120;
    vec3 WorldPos_B111;
};

// unifrom matrices to perform transformations
// previously this would have been done in vertex shader
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform vec3 viewPos;

uniform sampler2D normals_img;

uniform int scale;
uniform int octaves;

uniform float DENS;
uniform float G;

// read in vector arrays from previous shader
in vec3 posTC[] ;
in vec2 texCoordsTC[] ;
in patch OutputPatch oPatch;

// pass along the interpolated values
out vec2 texCoordsES ;
out vec3 posES ;
out vec3 normalsES ;
out float visibilityES;


void main()
{
	float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    float uPow3 = pow(u, 3);
    float vPow3 = pow(v, 3);
    float wPow3 = pow(w, 3);
    float uPow2 = pow(u, 2);
    float vPow2 = pow(v, 2);
    float wPow2 = pow(w, 2);


    posES = oPatch.WorldPos_B300 * wPow3 +
                oPatch.WorldPos_B030 * uPow3 +
                oPatch.WorldPos_B003 * vPow3 +
                oPatch.WorldPos_B210 * 3.0 * wPow2 * u +
                oPatch.WorldPos_B120 * 3.0 * w * uPow2 +
                oPatch.WorldPos_B201 * 3.0 * wPow2 * v +
                oPatch.WorldPos_B021 * 3.0 * uPow2 * v +
                oPatch.WorldPos_B102 * 3.0 * w * vPow2 +
                oPatch.WorldPos_B012 * 3.0 * u * vPow2 +
                oPatch.WorldPos_B111 * 6.0 * w * u * v;
				
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates

    texCoordsES = interpolate2D(texCoordsTC[0], texCoordsTC[1], texCoordsTC[2]) ;
    //posES = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
	
	vec4 map = texture(normals_img, texCoordsES);
	
	normalsES = map.rgb;
	posES.y = map.a;
	
    // transform vertex to clip space
	gl_Position = projection * view * model *vec4(posES, 1.0);
	
	//fog 
	float distanceFromCamera = distance(viewPos, posES);
	visibilityES = exp(-pow((distanceFromCamera*DENS),G));
	visibilityES = clamp(visibilityES, 0.0, 1.0);

} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}