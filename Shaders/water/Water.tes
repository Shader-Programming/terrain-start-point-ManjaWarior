#version 450 core

layout(triangles, equal_spacing, ccw) in;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 viewPos;
uniform float DENS;//fog density
uniform float G;//fog gradient

in vec3 posTC[] ;
in vec2 texCoordsTC[];

out vec3 posES ;
out vec2 TexCoordsES;
out float visibilityES;



void main()
{

   posES = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   TexCoordsES = interpolate2D(texCoordsTC[0], texCoordsTC[1], texCoordsTC[2]) ;
   
   gl_Position = projection * view * model * vec4(posES, 1.0); 

   //fog stuff
	float distanceFromCamera = distance(viewPos, posES);
	visibilityES = exp(-pow((distanceFromCamera*DENS),G));//calculates fog dependent on distance 
	visibilityES = clamp(visibilityES, 0.0, 1.0);
} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
       return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
       return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

